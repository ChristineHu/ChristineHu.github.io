{"meta":{"title":"HuWen's Blog","subtitle":null,"description":"Christine.Hu's Blog","author":"胡文(Christine Hu)","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-08-24T05:32:23.000Z","updated":"2018-08-24T07:12:39.356Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"javascript学习之二","slug":"javascript学习之二","date":"2018-09-06T05:30:00.000Z","updated":"2018-09-12T06:42:57.480Z","comments":true,"path":"2018/09/06/javascript学习之二/","link":"","permalink":"http://yoursite.com/2018/09/06/javascript学习之二/","excerpt":"","text":"javascript学习14章（表单的基础知识）表单的基础知识在HTML中，表单是由form元素来表示的，而在JavaScript中。表单对应的则是HTMLForm-Element类型。 取得form元素引用的方式 添加id属性，然后用getElementById()获取 通过document.forms可以获取页面中的所有的表单。在这个集合中，可以通过索引或name来取得特定的表单var firstForm = document.forms[0]hexovar myForm = document.forms[&quot;form2&quot;] ~通过document.form2可以访问到名为form2的表单。不过不推荐~ 提交表单只要我们点击一下代码生成的按钮，就可以提交表单&lt;input type=&quot;submit&quot; value=&quot;Submit Form&quot;/&gt;&lt;button type=&quot;submit&quot;&gt;Submit Form&lt;/button&gt;&lt;input type=&quot;image&quot; src=&quot;graphic.gif&quot;/&gt;为了避免重复提交表单 在第一次提交表单后就禁用提交按钮 利用onsubmit事件处理程序取消后续的表单操作 重置表单当用户单击重置按钮时，表单会被重置。使用 type 特性值为”reset”的input或button都可以创建重置按钮&lt;input type=&quot;reset&quot; value=&quot;Reset Form&quot;/&gt;&lt;button type=&quot;reset&quot;&gt;Reset Form&lt;/button&gt; 表单字段 每个表单都有elements属性，该属性是表单中所有表单元素（字段）的集合，可以按照位置和name的特性来访问它们。 共有的表单字段属性 共有的表单字段方法：focus()和blur() 共有的表单字段事件 文本框脚本选择文本 用于选择文本框中的所有文本。 选择（select）事件 取得选择的文本 添加2个属性：selectionStart和selectionEnd 选择部分文本 选择文本框中的部分文档：setSelectionRange()IE8及之前版本: var range=textBox.createTextRange(); range.collapse(true); range.moveStart(“character”,0); range.moveEnd(“character”,3); range.select()过滤输入 屏蔽字符 操作剪贴板 自动切换焦点HTML5约束验证API 必填字段(required) 其他输入类型（url,email,number,range,datatime,datatime-local,date,month,week,time） 数值范围(min,max,step) 输入模式 (pattern属性) 检测有效性（checkValidity）\\ 禁用验证 通过设置novalidate属性，可以告诉表单不进行验证，如果存在多个提交按钮，为了指定某个提交按钮不需要验证表单，可以在相应的按钮上添加formnovalidate属性。 选择框脚本 选择框是通过select和option元素组成的。除了所有表单共有的属性和方法以外，HTMLSelectElement类型还提供了下列属性和方法。 add multiple remove selectIndex size 选择选项添加选项 方法1 var newOption=document.createElement(\"option\"); newOption.appendChild(document.createTextNode(\"option text\")); newOption.setAttribute(\"value\",\"Option value\"); selectBox.appendChild(newOption); 方法2 var newOption2=new Option(\"newOption2\",\"newOption2 Value\"); selectBox.appendChild(newOption2) //在IE8及之前版本中有问题 方法3(最佳实践)var newOption3=new Option(“newOption3”,”newOption3 Value”);selectBox.add(newOption3,undefined) //最佳实践 移除选项 removeChild() remove() 设置为null移动和重排选项 使用DOM中的appendChild方法，就可以将第一个选择框中的选项直接移动到第二个选择框中。 表单序列化 浏览器是如何将数据发送给服务器的 对表单字段的名称和值进行url编码，使用和号（&amp;）分隔 不发送禁用的表单字段 只发送勾选的复选框和单选按钮 多选选择框中每个选中的值单独一个条目 在单击提交按钮提交表单的情况下，也会发送提交按钮；否则不发送提交按钮，也包括type为image的input元素 select元素的值，就是选中option的value值。如果option元素没有value特性，则是option元素的文本值。 富文本编辑 这一技术的本质，就是在页面中嵌入一个包含空HTML页面的iframe.通过设置designMode属性，这个空白的HTML页面可以编辑。而编辑对象则是该页面的body元素的HTML代码。 使用contenteditable属性 可以把contenteditable属性应用给也页面中的任何元素，然后用户立即就可以编辑该元素。有三个可能的值：“true”表示打开，“false”表示关闭，“inherit”表示从父元素那里继承。 操作富文本 主要方式使用document.execCommand()。传递三个参数：要执行的命令名称、表示浏览器是否该为当前命令提供用户界面的一个布尔值（为了确保跨浏览器的兼容性，应该始终设置为false）和执行命令必须的一个值（如不需要传值，则传递null） 富文本选区 使用框架的getSelection()方法，可以确定实际选择的文本 表单与富文本 小结","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}],"keywords":[]},{"title":"javascript学习之一","slug":"javascript学习之一","date":"2018-08-28T02:49:04.000Z","updated":"2018-09-05T10:59:46.927Z","comments":true,"path":"2018/08/28/javascript学习之一/","link":"","permalink":"http://yoursite.com/2018/08/28/javascript学习之一/","excerpt":"","text":"javascript学习13章（事件）基本释义JavaScript与HTML之间的交互是通过事件实现的。事件:就是文档或浏览器窗口发生的一些特定的交互瞬间侦听器预定事件 时间流 描述是从页面中接收时间的顺序 IE 的时间流是 事件冒泡Netscape Communicator 的时间流是 事件捕获 事件冒泡 事件开始时由具体的元素（文档中嵌套最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。 所有现代浏览器都支持事件冒泡。IE5.5及更早的版本中的事件冒泡会跳过元素（从body直接跳到document）。IE9、Firefox、chrome和safari则将事件一直冒泡到windows对象 事件捕获 事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达目标之前捕获它。 DOM事件流 时间流包括3个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段 事件处理程序事件：用户或浏览器自身执行的某种动作click、load和mouse，都是事件的名字，而相应某种事件的函数就叫做事件处理程序 HTML事件处理程序DOM0 级事件处理程序 就是将一个函数赋值给一个事件处理程序属性(例如onClick) DOM2 级事件处理程序 定义了两个方法，用于处理制定和删除事件处理程序的操作：addEventLister()和removeEventLister()。接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（布尔值为true,表示在捕获阶段调用事件处理程序；如果为false,表示在冒泡阶段调用事件处理程序） IE 级事件处理程序 提供了类似的两个方法：attachEvent()和detachEvent()。接受2个参数：事件处理程序名称和事件处理程序函数 在使用attachEvent()方法的情况下，事件处理程序会在全局作用中运行，因此this等于window 跨浏览器的事件处理程序 使用EventUtil中addHandler()和removeHandler()传入3个参数：要操作的元素、事件名称和事件处理程序 var EventUtil={ addHandler:function(element,type,handler){ if(element.addEventListener){ element.addEventListener(type,handler,false) }else if(element.attachEvent){ element.attachEvent(“on”+type,handler) }else{ element[‘on’+type]=handler } }, removeHandler:function(element,type,handler){ if(element.removeEventListener){ element.addEventListener(type,handler,false) }else if(element.attachEvent){ element.detachEvent(“on”+type,handler) }else{ element[‘on’+type]=null } } }; 事件对象DOM中的事件对象 所有事件都有下表列出的成员 属性/方法 类型 读/写 说明 bubbles Boolean 只读 表明事件是否冒泡 cancelable Boolean 只读 表明是否可以取消事件的默认行为 currentTarget Boolean 只读 其事件处理程序当前正在处理事件的那个元素 defaultPrevented Boolean 只读 为true表示已经调用了preventDefault() detail Integer 只读 与事件相关的细节信息 evenPhase Integer 只读 调用事件处理程序的阶段：1表示捕获阶段，2表示“处于目标”，3表示冒泡阶段 preventDefault Function 只读 取消事件的默认行为。如果cancelable是true,则可以使用这个方法 stopImmediatePropagation Function 只读 取消事件的进一步捕获或者冒泡，同时阻止任何事件处理程序被调用(DOM3级重新增) stopPropagation Function 只读 取消事件进一步的捕获或者冒泡。如果bubbles为true,则可以使用这个方法 target Element 只读 事件的目标 trusted Boolean 只读 为true表示事件是浏览器生成的。为false表示是由开发人员通过javascript创建的（DOM3级事件中新增） type String 只读 被触发的事件类型 view Abstractive 只读 与事件关联的抽象视图。等同于发生事件的window对象 只用在事件处理程序执行期间，event对象才会存在；一旦事件处理程序执行完毕，event对象就会被销毁 IE中的事件对象在要访问IE中event对象有几种不同的方式，取决于指定事件处理程序的方法。 在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性 如果是使用attachEvent()添加的，那么就会有一个event对象作为参数被传入事件处理程序函数中（也可以通过window对象来访问event对象） 通过HTML特性指定的事件处理程序，那么还可以通过一个名叫event的变量来访问event对象&lt;input type=&#39;button&#39; value=&#39;Click me&#39; onclick=&#39;alert(event.type)&#39;/&gt; 属性/方法 类型 读/写 说明 cancelBubble Boolean 读/写 默认值为false，将其设置为true就可以取消事件冒泡（与DOM中stopPropagation()方法的作用相同） returnValue Boolean 读/写 默认值为true,但将其设置为false就可以取消事件的默认行为（与DOM中preventDefalut()方法的作用相同） srcElement Element 只读 事件的目标 type String 只读 被触发的事件类型 跨浏览器的事件对象 var EventUtil={ addHandler:function(element,type,handler){ // 省略代码 }, getEvent:function(event){ return evnet?event:window.event }, getTarget:function(event){ return event.target || event.srcElement }, preventDefault:function (event) { if(event.preventDefault){ event.preventDefault() }else{ event.returnValue=false; } }, removeHandler:function(element,type,handler){ //省略代码 }, stopPropagation:function(event){ if(event.stopPropagation){ event.stopPropagation(); }else{ event.cancelBubble=true } } } 事件类型“DOM3级事件”规定了以下几类事件类型 UI事件，当用户与页面上的元素交互时触发 焦点事件，当用户获得或失去焦点时触发 鼠标事件，当用户通过鼠标在页面上执行操作时触发 滚轮事件，当使用鼠标滚轮（或类似设备时）触发 文本事件，当在文档中输入文本时触发 键盘事件，当用户通过键盘在页面上执行操作时触发 合成事件，当为IME(Input Medthod Editor,输入法编辑器)输入字符时触发 变动事件，当底层DOM结构发生变化时触发 变动名称事件，当元素或者属性名变动时触发，已经废弃 UI事件 load事件 unload事件 resize事件浏览器窗口最小化最大化也会触发resize事件 scroll事件 焦点事件 blur DOMFocusIn DOMFocusOut focus focusin focusout 鼠标与滚轮事件DOM3级中定义了9个鼠标事件 click dbclick mousedown mouseenter: 在鼠标光标从元素外部首次移到元素范围之内时触发 mouseleave: 在位于元素上方的鼠标移动到元素范围之外时触发 mousemove: 当鼠标在元素内部移动时反复的触发 mouseout： 在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发 mouseover：在鼠标指针位于一个元素的外部，然后用户将其首次移入另外一个元素边界之内触发 mouseup 1.客户区坐标位置 鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象的clientX和clientY属性中。 2.页面坐标位置 这个位置信息保存在事件对象的pageX和pageY属性中。 3.屏幕坐标位置 这个位置信息保存在事件对象的screenX和screenY属性中。 4.修改键 5.相关元素 6.鼠标按钮 7.更多的事件信息 对于鼠标事件来说，detail中包含一个数值，表示在给定的位置上发生多少次点击 8.鼠标滚轮事件 9.触摸设备 10.无障碍性问题 键盘与文本事件有3个键盘事件 keydown：在键盘上按下任何键触发，可重复触发 keypress: 在键盘上按下数字键触发，可重复触发 keyup: 当用户释放键盘上的键时处罚 textInput:在可编辑区域中输入字符时，就会触发这个事件 复合事件 用于处理IME的输入序列 变动事件能在DOM中某一部分发生变化时给出提示 DOMSubtreeModified：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发 DOMNodeInserted: 在一个节点作为子节点被插入另一个节点中时触发 DOMNodeRemoved: 在节点从其父节点中被移除时触发 DOMNodeInsertedIntoDocument:在一个节点被直接插入文档或通过子树直接插入文档之后触发。这个事件在DOMNodeInserted之后触发 DOMNodeRemovedFromDocument:在一个节点被直接从文档中移除或通过子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发 DOMAtrrModified：在特性被修改之后触发 DOMChracterDataModified:在文本节点的值发生变化时触发。 HTML5事件 contextmenu事件 用以表示何时应该显示上下文菜单，以便开发人员取消默认的上下文菜单而提供自定义的菜单 beforeunload事件 是为了让开发人员有可能在页面卸载之前阻止这一操作 DOMContentLoaded事件 window的load事件会在页面中的一切都加载完毕时触发，但这个过程可能会因为要加载外部资源过多而颇费周折。DOMContentLoaded事件则在形成完整的DOM树之后就会触发，不理会图像，JavaScript文件、css文件或其他资源是否下载完毕。 readystatechange事件 提供与文档或元素的加载状态有关的信息 pageshow和pagehide事件 hashChange事件 以便URL的参数列表发生变化时通知开发人员 设备事件 orientationchange事件 只要用户改变了设备查看模式，就会触发orientationchange事件 、 所有ios设备都支持orientationonchange事件和window.orientation属性 MozOrientation事件 当设备的加速计检测到设备方向改变时，就会触发这个事件。该事件只能提供一个平面的方向变化。 只有带加速器的设备才支持MozOrientation事件 deviceorientation事件 devicemotion事件 触摸与手势事件 触摸事件 手势事件 内存和性能事件委托 事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理一个某一类型的所有事件 最适合采用事件委托的事件包括click,mouseup.mousedown,keyup,keydown和keypress 移除事件处理程序模拟事件DOM中的事件模拟 模拟鼠标事件 模拟键盘事件 模拟其他事件 自定义DOM事件 IE中的事件模拟 小结","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}],"keywords":[]},{"title":"网站搭建学习","slug":"网站搭建学习","date":"2018-08-24T07:42:52.000Z","updated":"2018-08-24T09:15:55.339Z","comments":true,"path":"2018/08/24/网站搭建学习/","link":"","permalink":"http://yoursite.com/2018/08/24/网站搭建学习/","excerpt":"","text":"网站搭建参考网址：https://yegod.github.io/blog-1/ 添加搜索功能参考网址：https://blog.csdn.net/ganzhilin520/article/details/79047983 添加评论功能参考网址：https://blog.csdn.net/lcyaiym/article/details/76762074","categories":[],"tags":[{"name":"伸手党","slug":"伸手党","permalink":"http://yoursite.com/tags/伸手党/"}],"keywords":[]}]}