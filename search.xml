<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript学习之四]]></title>
    <url>%2F2018%2F09%2F14%2Fjavascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[javascript学习16章（HTML5脚本编程） 跨文档消息的传递 简称为XDM,指的是在来自不同域的页面间传递消息 发送：XDM的核心是postMessage方法，该方法接收两个参数：一条消息和一个表示消息接收方来自哪个域的字符串。第二个参数对保障安全通信非常重要。接收：接收到XDM消息时，会触发window对象的message事件。触发message事件后，传递给onmessage处理程序的事件对象包含以下三方面的重要信息。 function send() { var data = document.querySelector('#data').value; window.frames[0].postMessage(data, 'http://localhost:9022/'); // 触发跨域子页面的messag事件 } window.addEventListener('message', function(messageEvent) { var data = messageEvent.data; console.info('message from child:', data); }, false); 原生拖放拖放事件拖放某个元素时，将依次触发下列事件： dragstart：拖动开始时，触发dragstart事件 drag：触发dragstart事件后，随即会触发drag事件，而且在元素被拖动期间会持续触发该事件。 dragend：当拖动停止时（无论是将元素放到有效的目标，还是放到无效的目标上），会触发dragend事件。 当某个元素被拖动到一个有效的放置目标上时，下列事件会依次发生： dragenter：有元素被拖动放置到目标上，会触发dragenter事件。 dragover：在被拖动的元素还在放置目标的范围内移动时，就会持续触发该事件。 dragleave：如果元素被拖出放置目标，dragover不再发生，但会触发dragleave事件。 drop：元素被放到了防止目标中，则会触发drop事件而不是drapleave事件。 自定义放置目标可以将任何元素变成有效的放置目标，方法就是重写dragenter和dragover事件的默认行为。为了让Firefox支持正常的拖放，还要取消drop事件的默认行为，阻止它打开url: var droptarget=document.getElementById("droptarget"); EventUtil.addHandler(droptarget,"dragenter",function(event){ EventUtil.preventDefault(event); }); EventUtil.addHandler(droptarget,"dragover",function(event){ EventUtil.preventDefault(event); }); EventUtil.addHandler(droptarget,"drop",function(event){ EventUtil.preventDefault(event); }) dataTransfer 事件对象的一个属性，只能在拖放事件事件处理程序中访问dataTransfer对象。 可以在dragstart事件处理程序中，调用setData()，手动保存自己要传输的数据，以便将来使用。保存在dataTransfer对象中的数据只能在drop事件处理程序中读取。 为了更好的在跨浏览器的情况下从dataTransfer对象中取得数据，最好在取得URL数据时检测两个值，而在取得文本数据时使用Text var dataTransfer=event.dataTransfer;//读取URLvar url = dataTransfer.getData(“url”) || dataTransfer.getData(“text/uri-list”);//读取文本var text=dataTransfer.getData(“Text”); dropEffect和effectAllowed 通过它来确定被拖动的元素以及作为放置目标的元素能够接收什么操作。 dropEffect：可以知道被拖动的元素能够执行哪种放置行为（必须在dragenter事件处理程序中针对放置目标来设置它） none：不能把拖动的元素放在这里 move：应该把拖动元素移动到放置目标上 copy：应该把拖动的元素复制到放置目标 link：表示放置目标会打开拖动的元素 effectAllowed：表示允许拖动元素是哪一种dropEffect（必须在dragstart事件处理程序设置effectAllowed属性） uninitiallized：没有给拖动元素设置任何放置行为。 none：被拖动的元素不能有任何行为 copy：只允许值为“copy”的dropEffect link：只允许值为“link”的dropEffect move：只允许值为“move”的dropEffect copyLink：只允许值为“copy”和“link”的dropEffect copyMove：只允许值为“copy”和“move”的dropEffect linkMove：只允许值为“link”和“move”的dropEffect all：允许任意的dropEffect 可拖动默认情况下，图像、链接和文本是可以拖动的。文本只有在选中的情况下才能拖动，而图像和链接则在任何时候都可以拖动。让其他元素拖动也有可能，为所有的HTML元素规定一个draggable属性，表示元素是否可以拖动。 其他成员 媒体元素 HTML5新增了两个与媒体相关的标签，让开发人员不必依赖任何插件就能在网页中嵌入跨浏览器的音频和视频内容。这两个标签就是和 属性见书P487 事件见书P488 自定义媒体播放器EventUtil.addHandler(player,”canplaythrough”,function(){ var player=document.getElementById(“player”), btn=document.getElementById(“video-btn”), curtime=document.getElementById(“curtime”), duration=document.getElementById(“duration”); //更新播放时间 duration.innerHTML=player.duration; //为按钮添加事件处理程序 EventUtil.addHandler(btn,”click”,function(event){ if(player.paused){ player.play(); btn.value=”Paused”; }else{ player.pause(); btn.value=”Play”; } }) //定时更新当前时间 setInterval(function(){ curtime.innerHTML=player.currentTime; },250) }); 检测编解码器的支持情况这两个媒体元素都有一个canPlayType()方法，该方法接受一种格式/编解码器字符串（详情见P490），返回”probably”,”maybe”,””。空字串串为假值。 Audio类型 audio元素还有一个原生的JavaScript构造函数Audio. var audio=new Audio(“sound.mp3”);EventUtil.addHandler(audio,”canplaythrough”,function(event){ audio.play();}); 历史状态管理执行pushState后，新的状态信息就会被加入历史状态栈，而浏览器地址栏也会变成新的相对URL。但是，浏览器并不会真的向服务器发送请求，即使状态改变之后查询location.href也会返回与地址栏中相同的地址。第一个参数尽可能地提供初始化页面状态所需的各种信息，第二个参数目前还没有浏览器实现，因此可以只传入一个空字符串。 history.pushState({name:’hu1’},’’,”hu.html”);按下后退按钮，会触发window对象的poststate事件。poststate事件的时间对象有一个state属性，这个属性就包含着当初以第一个参数传递给pushState()的状态对象。 EventUtil.addHandler(window,”popstate”,function(event){ var state=event.state; if(state){ processState(state); } })要更新当前的状态，可以调用replaceState()。调用这个方法不会在历史状态栈中创建新状态，只会重写当前的状态。 history.replaceState({name:’hu’},’’) 小结]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript学习之三]]></title>
    <url>%2F2018%2F09%2F12%2Fjavascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[javascript学习15章（使用canvas绘图） 基本用法 var drawing=document.getElementById("drawing"); //确定浏览器是否支持canvas元素 if(drawing.getContext){ var context=drawing.getContext("2d"); } 使用toDataURL()方法，可以导出在canvas上绘制的图像。这个方法接受一个参数，即图像的MIME类型格式，而且是用于创建图像的任何上下文。var imageUrl=drawing.toDataURL(&quot;img/png&quot;) 2D上下文2D上下文的坐标开始于canvas元素的左上角，原点坐标是（0，0）.所有坐标值都基于这个原点计算，x越大表示越靠右，y越大表示越靠下。默认情况下，width和height表示水平和垂直2个方向上的可用元素数目。 填充和描边绘制矩形 // *************绘制矩形******************* // 绘制红色矩形 context.fillStyle="#ff0000"; context.fillRect(10,10,50,50); // 绘制蓝色半透明矩形 context.fillStyle="rgba(0,0,255,0.5)"; context.fillRect(30,30,50,50); //清除两个矩形重叠地方的小矩形 context.clearRect(40,40,10,10) // 绘制红色描边矩形 context.strokeStyle="#ff0000"; context.strokeRect(110,110,50,50); // 绘制蓝色半透明描边矩形 context.strokeStyle="rgba(0,0,255,0.5)"; context.strokeRect(130,130,50,50); 绘制路径首先必须要调用beginPath()方法,表示要开始绘制新路径 arc(x,y,radius,startAngle,endAngle,counterclockwise):以x,y为圆心绘制一条圆弧,弧线半径为radius,起始和结束角度分别是startAngle,endAngle.最后一个参数表示startAngle,endAngle是否按照逆时针方向计算,值为false表示按顺时针方向计算. arcTo(x1,y1,x2,y2,radius):从上一点绘制一条弧线,到(x2,y2)为止,并以给定的半径radius穿过(x1,y1) bezierCurveTo(c1x,c1y,c2x,c2y,x,y):从上一点开始绘制一条曲线,到(x,y)为止,并且以(c1x,c1y)和(,c2x,c2y)为控制点 lineTo(x,y):从上一点开始绘制一条直线,到(x,y)为止 moveTo(x,y):将绘画游标移动到(x,y),不画线 quadraticCurveTo(cx,cy,x,y):从上一点开始绘制一条二次曲线,到(x,y)为止,并且以(cx,cy)作为控制点. rect(x,y,width,height):从点(x,y)开始绘制一个矩形,高度分别由width,height指定.如果想绘制一条连接到路径起点的线条，可以调用closePath()填充:fill()路径描边：stroke()路径上创建剪切区域：clip()//*绘制一个不带数字的时钟***//开始路径context.beginPath();//开始绘制外圆context.arc(100,100,99,0,2Math.PI,false);//绘制内圆context.moveTo(194,100);context.arc(100,100,94,0,2Math.PI,false);//绘制分针context.moveTo(100,100);context.lineTo(100,15);//绘制时针context.moveTo(100,100);context.lineTo(35,100);// 描边路径context.strokeStyle=”#000”;context.stroke();绘制文本 主要有2个方法:fillText()和strokeText().这2个方法都可以接收4个参数:要绘制的文本字符串,x坐标,y坐标和可选的最大像素宽度. 有以下属性: font:样式,大小及字体 textAlign:文本对齐方式,值有”start”,”end”,”left”,”right”和”center” textBaseline:文本基线,值有top,hanging,middle,alphabetic,ideographic,bottom context.font="bold 14px Arial"; context.textAlign="center"; context.textBaseline="middle"; context.fillText("3",188,100) context.fillText("6",100,188) context.fillText("9",12,100) context.fillText("12",100,12) // measureText(),返回接受文本的width属性 var fontSize=100; context.font=fontSize+"px Arial"; while(context.measureText("hello world").width > 140){ fontSize--; context.font=fontSize+"px Arial"; } context.fillText("hello world",210,210); context.fillText("font size is"+fontSize,210,250); 变换可以通过如下方法来修改变换矩阵 rotate(angle): 弧度 scale(scaleX,scaleY):缩放图像,在x方向乘以scaleX,在y方向上乘以scaleY translate(x,y):将坐标原点移动到(x,y).执行这个变换之后,坐标(0,0)会变成*之前由(x,y) transform(m1_1,m1_2,m2_1,m2_2,dx,dy):直接修改矩阵,方式是乘以以下矩阵.m1_1 m1_2 dxm2_1 m2_2 dy0 0 1 setTransform(m1_1,m1_2,m2_1,m2_2,dx,dy):将变换矩阵重置为默认状态,然后再调用transform() save():调用这个方法后，当时所有的设置都会进入一个栈结构，得以妥善保管。restore():在保存设置的栈结构中向前返回一级 绘制图像 drawImage():把一幅图像绘制到画布上,总共需要传入9个参数：要绘制的图像、源图像的x坐标、源图像的y坐标、源图像的宽度、源图像的高度、目标图像的x坐标、目标图像的y坐标、目标图像的宽度、目标图像的高度。 var image=document.images[0]; image.onload=function(){ context.drawImage(image,10,10); context.drawImage(image,50,10,20,30); context.drawImage(image, 0, 10, 150, 150, 0, 100, 100, 100); } 阴影 shadowColor: 用css颜色格式表示的阴影颜色，默认是黑色 shadowOffsetX: 形状或路径x轴方向的阴影偏移量，默认为0 shadowOffsetY: 形状或路径y轴方向的阴影偏移量，默认为0 shadowBlur: 模糊的像素数，默认0，即不模糊 // 设置阴影 context.shadowOffsetX=5; context.shadowOffsetY=5; context.shadowBlur=4; context.shadowColor="rgba(0,0,0,0.5)"; 渐变 要创建一个新的线性渐变: ① 可以调用createLinearGradient()方法。这个方法接受4个参数:起点x坐标，起点的y坐标，终点的x坐标，终点的y坐标。 ② 使用addColorStop()方法来指定色标。这个方法接收两个参数：色标位置和css颜色值。色标位置是0（开始的颜色）和1（结束的位置）之间的数字 var gradient=context.createLinearGradient(230,230,270,270); gradient.addColorStop(0,"white"); gradient.addColorStop(1,"black"); context.fillStyle=gradient; context.fillRect(230,230,50,50); 要创建径向渐变（或放射性渐变）① 可以调用createRadialGradient()方法。这个方法接受6个参数,对应2个圆的圆心和半径。② 使用addColorStop()方法来指定色标。这个方法接收两个参数：色标位置和css颜色值。色标位置是0（开始的颜色）和1（结束的位置）之间的数字 var gradient1=context.createRadialGradient(555,555,10,550,550,30); gradient1.addColorStop(0,"white"); gradient1.addColorStop(1,"black"); context.fillStyle=gradient1; context.fillRect(530,530,50,50); ##### 模式 ##### >其实是重复的图像，可以用来填充或描边图形。要创建一个模式，可以调用createPattern()方法并传入两个参数：一个HTML元素和一个表示如何重复的字符串。 *** createPattern()方法的第一个参数也可以是vedio和canvas元素 *** var pattern=context.createPattern(image,"repeat"); context.fillStyle=pattern; context.fillRect(10,10,300,300); 使用图像数据 2D上下文的长处是，可以通过getImageData()取得原始图像的数据。这个方法接受4个参数：要取得其数据的画面区域的x和y坐标以及该区域的像素宽度和高度。 var imageData=context.getImageData(10,5,50,50); 合成 globalAlpha: 是一个介于0和1之间的值，用于指定所有绘制的透明度 globalCompositionOperation:表示后绘制的图形怎样与先绘制的图形结合 WebGL类型化数组 类型化数组的核心就是一个名为ArrayBuffer的类型。每个ArrayBuffer对象表示的只是内存中指定的字节数，但不会指定这些字节用于保存什么类型的数据。 var buffer=new ArrayBuffer(20);创建ArrayBuffer对象后，能通过该对象获得的信息只有它包含的字节数，方法是访问其byteLengthvar bytes=buffer.byteLength 视图使用ArrayBuffer的一种特别的方式就是用它来创建数组缓冲器视图。其中最常见的视图是DataView,通过它可以选择ArrayBuffer中的一小段字节。为此，可以在创建的DataView实例的时候传入一个ArrayBuffer、一个可选的字节偏移量和一个可选的要选择的字节数。 //基于整个缓冲器创建一个新视图 var view = new DataView(buffer); //创建一个开始于字节9的新视图 var view = new DataView(buffer,9); //创建一个字节9开始到字节18的新视图 var view = new DataView(buffer,9,10); 类型化视图 webGL上下文（看的比较迷，暂时放弃） 常量 方法命名 方法名的后缀会包含参数个数（1到4）和接收的数据类型（f表示浮点数，i表示整数）。例如，gl.uniform4i意味着要接收4个浮点数。也有很多方法接收数组参组参数，这样的方法其名字中会包含字母v。因此，gl.uniform3iv会包含3个值的整数数组。 准备绘图 视口与坐标 缓冲区 错误 着色器 编写着色器 编写着色器程序 为着色器传入值 调试着色器和程序 绘图 纹理 读取像素支持 小结]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript学习之二]]></title>
    <url>%2F2018%2F09%2F06%2Fjavascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[javascript学习14章（表单的基础知识）表单的基础知识在HTML中，表单是由form元素来表示的，而在JavaScript中。表单对应的则是HTMLForm-Element类型。 取得form元素引用的方式 添加id属性，然后用getElementById()获取 通过document.forms可以获取页面中的所有的表单。在这个集合中，可以通过索引或name来取得特定的表单var firstForm = document.forms[0]hexovar myForm = document.forms[&quot;form2&quot;] ~通过document.form2可以访问到名为form2的表单。不过不推荐~ 提交表单只要我们点击一下代码生成的按钮，就可以提交表单&lt;input type=&quot;submit&quot; value=&quot;Submit Form&quot;/&gt;&lt;button type=&quot;submit&quot;&gt;Submit Form&lt;/button&gt;&lt;input type=&quot;image&quot; src=&quot;graphic.gif&quot;/&gt;为了避免重复提交表单 在第一次提交表单后就禁用提交按钮 利用onsubmit事件处理程序取消后续的表单操作 重置表单当用户单击重置按钮时，表单会被重置。使用 type 特性值为”reset”的input或button都可以创建重置按钮&lt;input type=&quot;reset&quot; value=&quot;Reset Form&quot;/&gt;&lt;button type=&quot;reset&quot;&gt;Reset Form&lt;/button&gt; 表单字段 每个表单都有elements属性，该属性是表单中所有表单元素（字段）的集合，可以按照位置和name的特性来访问它们。 共有的表单字段属性 共有的表单字段方法：focus()和blur() 共有的表单字段事件 文本框脚本选择文本 用于选择文本框中的所有文本。 选择（select）事件 取得选择的文本 添加2个属性：selectionStart和selectionEnd 选择部分文本 选择文本框中的部分文档：setSelectionRange()IE8及之前版本: var range=textBox.createTextRange(); range.collapse(true); range.moveStart(“character”,0); range.moveEnd(“character”,3); range.select()过滤输入 屏蔽字符 操作剪贴板 自动切换焦点HTML5约束验证API 必填字段(required) 其他输入类型（url,email,number,range,datatime,datatime-local,date,month,week,time） 数值范围(min,max,step) 输入模式 (pattern属性) 检测有效性（checkValidity）\ 禁用验证 通过设置novalidate属性，可以告诉表单不进行验证，如果存在多个提交按钮，为了指定某个提交按钮不需要验证表单，可以在相应的按钮上添加formnovalidate属性。 选择框脚本 选择框是通过select和option元素组成的。除了所有表单共有的属性和方法以外，HTMLSelectElement类型还提供了下列属性和方法。 add multiple remove selectIndex size 选择选项添加选项 方法1 var newOption=document.createElement("option"); newOption.appendChild(document.createTextNode("option text")); newOption.setAttribute("value","Option value"); selectBox.appendChild(newOption); 方法2 var newOption2=new Option("newOption2","newOption2 Value"); selectBox.appendChild(newOption2) //在IE8及之前版本中有问题 方法3(最佳实践)var newOption3=new Option(“newOption3”,”newOption3 Value”);selectBox.add(newOption3,undefined) //最佳实践 移除选项 removeChild() remove() 设置为null移动和重排选项 使用DOM中的appendChild方法，就可以将第一个选择框中的选项直接移动到第二个选择框中。 表单序列化 浏览器是如何将数据发送给服务器的 对表单字段的名称和值进行url编码，使用和号（&amp;）分隔 不发送禁用的表单字段 只发送勾选的复选框和单选按钮 多选选择框中每个选中的值单独一个条目 在单击提交按钮提交表单的情况下，也会发送提交按钮；否则不发送提交按钮，也包括type为image的input元素 select元素的值，就是选中option的value值。如果option元素没有value特性，则是option元素的文本值。 富文本编辑 这一技术的本质，就是在页面中嵌入一个包含空HTML页面的iframe.通过设置designMode属性，这个空白的HTML页面可以编辑。而编辑对象则是该页面的body元素的HTML代码。 使用contenteditable属性 可以把contenteditable属性应用给也页面中的任何元素，然后用户立即就可以编辑该元素。有三个可能的值：“true”表示打开，“false”表示关闭，“inherit”表示从父元素那里继承。 操作富文本 主要方式使用document.execCommand()。传递三个参数：要执行的命令名称、表示浏览器是否该为当前命令提供用户界面的一个布尔值（为了确保跨浏览器的兼容性，应该始终设置为false）和执行命令必须的一个值（如不需要传值，则传递null） 富文本选区 使用框架的getSelection()方法，可以确定实际选择的文本 表单与富文本 小结]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript学习之一]]></title>
    <url>%2F2018%2F08%2F28%2Fjavascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[javascript学习13章（事件）基本释义JavaScript与HTML之间的交互是通过事件实现的。事件:就是文档或浏览器窗口发生的一些特定的交互瞬间侦听器预定事件 时间流 描述是从页面中接收时间的顺序 IE 的时间流是 事件冒泡Netscape Communicator 的时间流是 事件捕获 事件冒泡 事件开始时由具体的元素（文档中嵌套最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。 所有现代浏览器都支持事件冒泡。IE5.5及更早的版本中的事件冒泡会跳过元素（从body直接跳到document）。IE9、Firefox、chrome和safari则将事件一直冒泡到windows对象 事件捕获 事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达目标之前捕获它。 DOM事件流 时间流包括3个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段 事件处理程序事件：用户或浏览器自身执行的某种动作click、load和mouse，都是事件的名字，而相应某种事件的函数就叫做事件处理程序 HTML事件处理程序DOM0 级事件处理程序 就是将一个函数赋值给一个事件处理程序属性(例如onClick) DOM2 级事件处理程序 定义了两个方法，用于处理制定和删除事件处理程序的操作：addEventLister()和removeEventLister()。接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（布尔值为true,表示在捕获阶段调用事件处理程序；如果为false,表示在冒泡阶段调用事件处理程序） IE 级事件处理程序 提供了类似的两个方法：attachEvent()和detachEvent()。接受2个参数：事件处理程序名称和事件处理程序函数 在使用attachEvent()方法的情况下，事件处理程序会在全局作用中运行，因此this等于window 跨浏览器的事件处理程序 使用EventUtil中addHandler()和removeHandler()传入3个参数：要操作的元素、事件名称和事件处理程序 var EventUtil={ addHandler:function(element,type,handler){ if(element.addEventListener){ element.addEventListener(type,handler,false) }else if(element.attachEvent){ element.attachEvent(“on”+type,handler) }else{ element[‘on’+type]=handler } }, removeHandler:function(element,type,handler){ if(element.removeEventListener){ element.addEventListener(type,handler,false) }else if(element.attachEvent){ element.detachEvent(“on”+type,handler) }else{ element[‘on’+type]=null } } }; 事件对象DOM中的事件对象 所有事件都有下表列出的成员 属性/方法 类型 读/写 说明 bubbles Boolean 只读 表明事件是否冒泡 cancelable Boolean 只读 表明是否可以取消事件的默认行为 currentTarget Boolean 只读 其事件处理程序当前正在处理事件的那个元素 defaultPrevented Boolean 只读 为true表示已经调用了preventDefault() detail Integer 只读 与事件相关的细节信息 evenPhase Integer 只读 调用事件处理程序的阶段：1表示捕获阶段，2表示“处于目标”，3表示冒泡阶段 preventDefault Function 只读 取消事件的默认行为。如果cancelable是true,则可以使用这个方法 stopImmediatePropagation Function 只读 取消事件的进一步捕获或者冒泡，同时阻止任何事件处理程序被调用(DOM3级重新增) stopPropagation Function 只读 取消事件进一步的捕获或者冒泡。如果bubbles为true,则可以使用这个方法 target Element 只读 事件的目标 trusted Boolean 只读 为true表示事件是浏览器生成的。为false表示是由开发人员通过javascript创建的（DOM3级事件中新增） type String 只读 被触发的事件类型 view Abstractive 只读 与事件关联的抽象视图。等同于发生事件的window对象 只用在事件处理程序执行期间，event对象才会存在；一旦事件处理程序执行完毕，event对象就会被销毁 IE中的事件对象在要访问IE中event对象有几种不同的方式，取决于指定事件处理程序的方法。 在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性 如果是使用attachEvent()添加的，那么就会有一个event对象作为参数被传入事件处理程序函数中（也可以通过window对象来访问event对象） 通过HTML特性指定的事件处理程序，那么还可以通过一个名叫event的变量来访问event对象&lt;input type=&#39;button&#39; value=&#39;Click me&#39; onclick=&#39;alert(event.type)&#39;/&gt; 属性/方法 类型 读/写 说明 cancelBubble Boolean 读/写 默认值为false，将其设置为true就可以取消事件冒泡（与DOM中stopPropagation()方法的作用相同） returnValue Boolean 读/写 默认值为true,但将其设置为false就可以取消事件的默认行为（与DOM中preventDefalut()方法的作用相同） srcElement Element 只读 事件的目标 type String 只读 被触发的事件类型 跨浏览器的事件对象 var EventUtil={ addHandler:function(element,type,handler){ // 省略代码 }, getEvent:function(event){ return evnet?event:window.event }, getTarget:function(event){ return event.target || event.srcElement }, preventDefault:function (event) { if(event.preventDefault){ event.preventDefault() }else{ event.returnValue=false; } }, removeHandler:function(element,type,handler){ //省略代码 }, stopPropagation:function(event){ if(event.stopPropagation){ event.stopPropagation(); }else{ event.cancelBubble=true } } } 事件类型“DOM3级事件”规定了以下几类事件类型 UI事件，当用户与页面上的元素交互时触发 焦点事件，当用户获得或失去焦点时触发 鼠标事件，当用户通过鼠标在页面上执行操作时触发 滚轮事件，当使用鼠标滚轮（或类似设备时）触发 文本事件，当在文档中输入文本时触发 键盘事件，当用户通过键盘在页面上执行操作时触发 合成事件，当为IME(Input Medthod Editor,输入法编辑器)输入字符时触发 变动事件，当底层DOM结构发生变化时触发 变动名称事件，当元素或者属性名变动时触发，已经废弃 UI事件 load事件 unload事件 resize事件浏览器窗口最小化最大化也会触发resize事件 scroll事件 焦点事件 blur DOMFocusIn DOMFocusOut focus focusin focusout 鼠标与滚轮事件DOM3级中定义了9个鼠标事件 click dbclick mousedown mouseenter: 在鼠标光标从元素外部首次移到元素范围之内时触发 mouseleave: 在位于元素上方的鼠标移动到元素范围之外时触发 mousemove: 当鼠标在元素内部移动时反复的触发 mouseout： 在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发 mouseover：在鼠标指针位于一个元素的外部，然后用户将其首次移入另外一个元素边界之内触发 mouseup 1.客户区坐标位置 鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象的clientX和clientY属性中。 2.页面坐标位置 这个位置信息保存在事件对象的pageX和pageY属性中。 3.屏幕坐标位置 这个位置信息保存在事件对象的screenX和screenY属性中。 4.修改键 5.相关元素 6.鼠标按钮 7.更多的事件信息 对于鼠标事件来说，detail中包含一个数值，表示在给定的位置上发生多少次点击 8.鼠标滚轮事件 9.触摸设备 10.无障碍性问题 键盘与文本事件有3个键盘事件 keydown：在键盘上按下任何键触发，可重复触发 keypress: 在键盘上按下数字键触发，可重复触发 keyup: 当用户释放键盘上的键时处罚 textInput:在可编辑区域中输入字符时，就会触发这个事件 复合事件 用于处理IME的输入序列 变动事件能在DOM中某一部分发生变化时给出提示 DOMSubtreeModified：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发 DOMNodeInserted: 在一个节点作为子节点被插入另一个节点中时触发 DOMNodeRemoved: 在节点从其父节点中被移除时触发 DOMNodeInsertedIntoDocument:在一个节点被直接插入文档或通过子树直接插入文档之后触发。这个事件在DOMNodeInserted之后触发 DOMNodeRemovedFromDocument:在一个节点被直接从文档中移除或通过子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发 DOMAtrrModified：在特性被修改之后触发 DOMChracterDataModified:在文本节点的值发生变化时触发。 HTML5事件 contextmenu事件 用以表示何时应该显示上下文菜单，以便开发人员取消默认的上下文菜单而提供自定义的菜单 beforeunload事件 是为了让开发人员有可能在页面卸载之前阻止这一操作 DOMContentLoaded事件 window的load事件会在页面中的一切都加载完毕时触发，但这个过程可能会因为要加载外部资源过多而颇费周折。DOMContentLoaded事件则在形成完整的DOM树之后就会触发，不理会图像，JavaScript文件、css文件或其他资源是否下载完毕。 readystatechange事件 提供与文档或元素的加载状态有关的信息 pageshow和pagehide事件 hashChange事件 以便URL的参数列表发生变化时通知开发人员 设备事件 orientationchange事件 只要用户改变了设备查看模式，就会触发orientationchange事件 、 所有ios设备都支持orientationonchange事件和window.orientation属性 MozOrientation事件 当设备的加速计检测到设备方向改变时，就会触发这个事件。该事件只能提供一个平面的方向变化。 只有带加速器的设备才支持MozOrientation事件 deviceorientation事件 devicemotion事件 触摸与手势事件 触摸事件 手势事件 内存和性能事件委托 事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理一个某一类型的所有事件 最适合采用事件委托的事件包括click,mouseup.mousedown,keyup,keydown和keypress 移除事件处理程序模拟事件DOM中的事件模拟 模拟鼠标事件 模拟键盘事件 模拟其他事件 自定义DOM事件 IE中的事件模拟 小结]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站搭建学习]]></title>
    <url>%2F2018%2F08%2F24%2F%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[网站搭建参考网址：https://yegod.github.io/blog-1/ 添加搜索功能参考网址：https://blog.csdn.net/ganzhilin520/article/details/79047983 添加评论功能参考网址：https://blog.csdn.net/lcyaiym/article/details/76762074]]></content>
      <tags>
        <tag>伸手党</tag>
      </tags>
  </entry>
</search>
