<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuWen&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-12T06:39:05.075Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胡文(Christine Hu)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript学习之二</title>
    <link href="http://yoursite.com/2018/09/06/javascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/09/06/javascript学习之二/</id>
    <published>2018-09-06T05:30:00.000Z</published>
    <updated>2018-09-12T06:39:05.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript学习14章（表单的基础知识）"><a href="#javascript学习14章（表单的基础知识）" class="headerlink" title="javascript学习14章（表单的基础知识）"></a><center>javascript学习14章（表单的基础知识）</center></h3><h4 id="表单的基础知识"><a href="#表单的基础知识" class="headerlink" title="表单的基础知识"></a>表单的基础知识</h4><blockquote><p>在HTML中，表单是由form元素来表示的，而在JavaScript中。表单对应的则是HTMLForm-Element类型。</p></blockquote><p>取得form元素引用的方式</p><ul><li>添加id属性，然后用getElementById()获取</li><li>通过document.forms可以获取页面中的所有的表单。在这个集合中，可以通过索引或name来取得特定的表单<br><code>var firstForm = document.forms[0]</code>hexo<br><code>var myForm = document.forms[&quot;form2&quot;]</code></li><li><del>~通过document.form2可以访问到名为form2的表单。不过不推荐</del>~</li></ul><h5 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h5><p>只要我们点击一下代码生成的按钮，就可以提交表单<br><code>&lt;input type=&quot;submit&quot; value=&quot;Submit Form&quot;/&gt;</code><br><code>&lt;button type=&quot;submit&quot;&gt;Submit Form&lt;/button&gt;</code><br><code>&lt;input type=&quot;image&quot; src=&quot;graphic.gif&quot;/&gt;</code><br><br><br>为了避免重复提交表单</p><ul><li>在第一次提交表单后就禁用提交按钮</li><li>利用onsubmit事件处理程序取消后续的表单操作</li></ul><h5 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h5><p>当用户单击重置按钮时，表单会被重置。使用 type 特性值为”reset”的input或button都可以创建重置按钮<br><code>&lt;input type=&quot;reset&quot; value=&quot;Reset Form&quot;/&gt;</code><br><code>&lt;button type=&quot;reset&quot;&gt;Reset Form&lt;/button&gt;</code></p><h5 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a>表单字段</h5><blockquote><p>每个表单都有elements属性，该属性是表单中所有表单元素（字段）的集合，可以按照位置和name的特性来访问它们。</p></blockquote><ul><li>共有的表单字段属性</li><li>共有的表单字段方法：focus()和blur()</li><li>共有的表单字段事件</li></ul><hr><h4 id="文本框脚本"><a href="#文本框脚本" class="headerlink" title="文本框脚本"></a>文本框脚本</h4><h5 id="选择文本"><a href="#选择文本" class="headerlink" title="选择文本"></a>选择文本</h5><blockquote><p>用于选择文本框中的所有文本。</p></blockquote><ul><li>选择（select）事件</li><li>取得选择的文本<blockquote><p>添加2个属性：selectionStart和selectionEnd</p></blockquote></li><li>选择部分文本<blockquote><p>选择文本框中的部分文档：setSelectionRange()<br>IE8及之前版本:</p></blockquote><pre><code><br>   var range=textBox.createTextRange();<br>   range.collapse(true);<br>   range.moveStart(“character”,0);<br>   range.moveEnd(“character”,3);<br>   range.select()<br></code></pre><h5 id="过滤输入"><a href="#过滤输入" class="headerlink" title="过滤输入"></a>过滤输入</h5></li><li>屏蔽字符</li><li>操作剪贴板</li></ul><h5 id="自动切换焦点"><a href="#自动切换焦点" class="headerlink" title="自动切换焦点"></a>自动切换焦点</h5><h5 id="HTML5约束验证API"><a href="#HTML5约束验证API" class="headerlink" title="HTML5约束验证API"></a>HTML5约束验证API</h5><ul><li>必填字段(required)</li><li>其他输入类型（url,email,number,range,datatime,datatime-local,date,month,week,time）</li><li>数值范围(min,max,step)</li><li>输入模式 (pattern属性)</li><li>检测有效性（checkValidity）\</li><li>禁用验证<blockquote><p>通过设置novalidate属性，可以告诉表单不进行验证，如果存在多个提交按钮，为了指定某个提交按钮不需要验证表单，可以在相应的按钮上添加formnovalidate属性。</p></blockquote></li></ul><hr><h4 id="选择框脚本"><a href="#选择框脚本" class="headerlink" title="选择框脚本"></a>选择框脚本</h4><blockquote><p>选择框是通过select和option元素组成的。除了所有表单共有的属性和方法以外，HTMLSelectElement类型还提供了下列属性和方法。</p><ul><li>add</li><li>multiple</li><li>remove</li><li>selectIndex</li><li>size</li></ul></blockquote><h5 id="选择选项"><a href="#选择选项" class="headerlink" title="选择选项"></a>选择选项</h5><h5 id="添加选项"><a href="#添加选项" class="headerlink" title="添加选项"></a>添加选项</h5><ul><li>方法1<pre><code>var newOption=document.createElement("option");newOption.appendChild(document.createTextNode("option text"));newOption.setAttribute("value","Option value");selectBox.appendChild(newOption);</code></pre></li><li><p>方法2</p><pre><code>var newOption2=new Option("newOption2","newOption2 Value");selectBox.appendChild(newOption2)  //在IE8及之前版本中有问题</code></pre></li><li><p>方法3(最佳实践)<br><pre><code><br>var newOption3=new Option(“newOption3”,”newOption3 Value”);<br>selectBox.add(newOption3,undefined)  //最佳实践<br></code></pre></p><h5 id="移除选项"><a href="#移除选项" class="headerlink" title="移除选项"></a>移除选项</h5></li><li>removeChild()</li><li>remove()</li><li>设置为null<h5 id="移动和重排选项"><a href="#移动和重排选项" class="headerlink" title="移动和重排选项"></a>移动和重排选项</h5><blockquote><p>使用DOM中的appendChild方法，就可以将第一个选择框中的选项直接移动到第二个选择框中。</p></blockquote></li></ul><hr><h4 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h4><p><strong> 浏览器是如何将数据发送给服务器的 </strong></p><ul><li>对表单字段的名称和值进行url编码，使用和号（&amp;）分隔</li><li>不发送禁用的表单字段</li><li>只发送勾选的复选框和单选按钮</li><li>多选选择框中每个选中的值单独一个条目</li><li>在单击提交按钮提交表单的情况下，也会发送提交按钮；否则不发送提交按钮，也包括type为image的input元素</li><li>select元素的值，就是选中option的value值。如果option元素没有value特性，则是option元素的文本值。</li></ul><hr><h4 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h4><blockquote><p>这一技术的本质，就是在页面中嵌入一个包含空HTML页面的iframe.通过设置designMode属性，这个空白的HTML页面可以编辑。而编辑对象则是该页面的body元素的HTML代码。</p></blockquote><h5 id="使用contenteditable属性"><a href="#使用contenteditable属性" class="headerlink" title="使用contenteditable属性"></a>使用contenteditable属性</h5><blockquote><p>可以把contenteditable属性应用给也页面中的任何元素，然后用户立即就可以编辑该元素。有三个可能的值：“true”表示打开，“false”表示关闭，“inherit”表示从父元素那里继承。</p></blockquote><h5 id="操作富文本"><a href="#操作富文本" class="headerlink" title="操作富文本"></a>操作富文本</h5><blockquote><p>主要方式使用document.execCommand()。传递三个参数：要执行的命令名称、表示浏览器是否该为当前命令提供用户界面的一个布尔值（为了确保跨浏览器的兼容性，应该始终设置为false）和执行命令必须的一个值（如不需要传值，则传递null）</p></blockquote><h5 id="富文本选区"><a href="#富文本选区" class="headerlink" title="富文本选区"></a>富文本选区</h5><blockquote><p>使用框架的getSelection()方法，可以确定实际选择的文本</p></blockquote><h5 id="表单与富文本"><a href="#表单与富文本" class="headerlink" title="表单与富文本"></a>表单与富文本</h5><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;javascript学习14章（表单的基础知识）&quot;&gt;&lt;a href=&quot;#javascript学习14章（表单的基础知识）&quot; class=&quot;headerlink&quot; title=&quot;javascript学习14章（表单的基础知识）&quot;&gt;&lt;/a&gt;&lt;center&gt;javasc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习之一</title>
    <link href="http://yoursite.com/2018/08/28/javascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/28/javascript学习之一/</id>
    <published>2018-08-28T02:49:04.000Z</published>
    <updated>2018-09-05T10:59:46.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript学习13章（事件）"><a href="#javascript学习13章（事件）" class="headerlink" title="javascript学习13章（事件）"></a><center>javascript学习13章（事件）</center></h3><h4 id="基本释义"><a href="#基本释义" class="headerlink" title="基本释义"></a>基本释义</h4><p><strong>JavaScript</strong>与<strong>HTML</strong>之间的交互是通过<strong>事件</strong>实现的。<br><strong>事件:</strong>就是文档或浏览器窗口发生的一些特定的交互瞬间<br><strong>侦听器</strong>预定事件</p><hr><h4 id="时间流"><a href="#时间流" class="headerlink" title="时间流"></a>时间流</h4><blockquote><p>描述是从页面中接收时间的顺序</p></blockquote><p><strong>IE</strong> 的时间流是 <strong>事件冒泡</strong><br><strong>Netscape Communicator</strong> 的时间流是 <strong>事件捕获</strong></p><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><blockquote><p>事件开始时由具体的元素（文档中嵌套最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。</p></blockquote><p><strong><em>所有现代浏览器都支持事件冒泡。IE5.5及更早的版本中的事件冒泡会跳过<html>元素（从body直接跳到document）。IE9、Firefox、chrome和safari则将事件一直冒泡到windows对象</html></em></strong></p><h5 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h5><blockquote><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达目标之前捕获它。</p></blockquote><h5 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h5><blockquote><p>时间流包括3个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段</p></blockquote><hr><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p><strong>事件：</strong>用户或浏览器自身执行的某种动作<br><strong>click</strong>、<strong>load</strong>和<strong>mouse</strong>，都是事件的名字，而相应某种事件的函数就叫做<strong>事件处理程序</strong></p><h5 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h5><h5 id="DOM0-级事件处理程序"><a href="#DOM0-级事件处理程序" class="headerlink" title="DOM0 级事件处理程序"></a>DOM0 级事件处理程序</h5><blockquote><p>就是将一个函数赋值给一个事件处理程序属性(例如onClick)</p></blockquote><h5 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h5><blockquote><p>定义了两个方法，用于处理制定和删除事件处理程序的操作：addEventLister()和removeEventLister()。<br>接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（布尔值为true,表示在捕获阶段调用事件处理程序；如果为false,表示在冒泡阶段调用事件处理程序）</p></blockquote><h5 id="IE-级事件处理程序"><a href="#IE-级事件处理程序" class="headerlink" title="IE 级事件处理程序"></a>IE 级事件处理程序</h5><blockquote><p>提供了类似的两个方法：attachEvent()和detachEvent()。<br>接受2个参数：事件处理程序名称和事件处理程序函数</p></blockquote><p><strong><em>在使用attachEvent()方法的情况下，事件处理程序会在全局作用中运行，因此this等于window</em></strong></p><h5 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h5><blockquote><p>使用EventUtil中addHandler()和removeHandler()<br>传入3个参数：要操作的元素、事件名称和事件处理程序</p></blockquote><p><pre><br>    <code><br>        var EventUtil={<br>           addHandler:function(element,type,handler){<br>               if(element.addEventListener){<br>                   element.addEventListener(type,handler,false)<br>               }else if(element.attachEvent){<br>                   element.attachEvent(“on”+type,handler)<br>               }else{<br>                   element[‘on’+type]=handler<br>               }<br>           },<br>           removeHandler:function(element,type,handler){<br>               if(element.removeEventListener){<br>                   element.addEventListener(type,handler,false)<br>               }else if(element.attachEvent){<br>                   element.detachEvent(“on”+type,handler)<br>               }else{<br>                   element[‘on’+type]=null<br>               }<br>           }<br>       };<br>    </code><br></pre></p><hr><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><h5 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h5><ul><li>所有事件都有下表列出的成员</li></ul><table><thead><tr><th style="text-align:center">属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">bubbles</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明事件是否冒泡</td></tr><tr><td style="text-align:center">cancelable</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明是否可以取消事件的默认行为</td></tr><tr><td style="text-align:center">currentTarget</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">其事件处理程序当前正在处理事件的那个元素</td></tr><tr><td style="text-align:center">defaultPrevented</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示已经调用了preventDefault()</td></tr><tr><td style="text-align:center">detail</td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">与事件相关的细节信息</td></tr><tr><td style="text-align:center">evenPhase</td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">调用事件处理程序的阶段：1表示捕获阶段，2表示“处于目标”，3表示冒泡阶段</td></tr><tr><td style="text-align:center">preventDefault</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的默认行为。如果cancelable是true,则可以使用这个方法</td></tr><tr><td style="text-align:center">stopImmediatePropagation</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或者冒泡，同时阻止任何事件处理程序被调用(DOM3级重新增)</td></tr><tr><td style="text-align:center">stopPropagation</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件进一步的捕获或者冒泡。如果bubbles为true,则可以使用这个方法</td></tr><tr><td style="text-align:center">target</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件的目标</td></tr><tr><td style="text-align:center">trusted</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示事件是浏览器生成的。为false表示是由开发人员通过javascript创建的（DOM3级事件中新增）</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td style="text-align:center">被触发的事件类型</td></tr><tr><td style="text-align:center">view</td><td style="text-align:center">Abstractive</td><td style="text-align:center">只读</td><td style="text-align:center">与事件关联的抽象视图。等同于发生事件的window对象</td></tr></tbody></table><p><strong><em>只用在事件处理程序执行期间，event对象才会存在；一旦事件处理程序执行完毕，event对象就会被销毁</em></strong></p><hr><h5 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h5><p>在要访问IE中event对象有几种不同的方式，取决于指定事件处理程序的方法。</p><ul><li>在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性</li><li>如果是使用attachEvent()添加的，那么就会有一个event对象作为参数被传入事件处理程序函数中（也可以通过window对象来访问event对象）</li><li>通过HTML特性指定的事件处理程序，那么还可以通过一个名叫event的变量来访问event对象<br><code>&lt;input type=&#39;button&#39; value=&#39;Click me&#39; onclick=&#39;alert(event.type)&#39;/&gt;</code></li></ul><table><thead><tr><th style="text-align:center">属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">cancelBubble</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td style="text-align:center">默认值为false，将其设置为true就可以取消事件冒泡（与DOM中stopPropagation()方法的作用相同）</td></tr><tr><td style="text-align:center">returnValue</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td style="text-align:center">默认值为true,但将其设置为false就可以取消事件的默认行为（与DOM中preventDefalut()方法的作用相同）</td></tr><tr><td style="text-align:center">srcElement</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件的目标</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td style="text-align:center">被触发的事件类型</td></tr></tbody></table><hr><h5 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h5><p><pre><br>    <code><br>        var EventUtil={<br>                addHandler:function(element,type,handler){<br>                    // 省略代码<br>                },<br>                getEvent:function(event){<br>                    return evnet?event:window.event<br>                },<br>                getTarget:function(event){<br>                    return event.target || event.srcElement<br>                },<br>                preventDefault:function (event) {<br>                    if(event.preventDefault){<br>                        event.preventDefault()<br>                    }else{<br>                        event.returnValue=false;<br>                    }<br>                },<br>                removeHandler:function(element,type,handler){<br>                    //省略代码<br>                },<br>                stopPropagation:function(event){<br>                    if(event.stopPropagation){<br>                        event.stopPropagation();<br>                    }else{<br>                        event.cancelBubble=true<br>                    }<br>                }<br>            }<br>    </code><br></pre></p><hr><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>“DOM3级事件”规定了以下几类事件类型</p><ul><li>UI事件，当用户与页面上的元素交互时触发</li><li>焦点事件，当用户获得或失去焦点时触发</li><li>鼠标事件，当用户通过鼠标在页面上执行操作时触发</li><li>滚轮事件，当使用鼠标滚轮（或类似设备时）触发</li><li>文本事件，当在文档中输入文本时触发</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发</li><li>合成事件，当为IME(Input Medthod Editor,输入法编辑器)输入字符时触发</li><li>变动事件，当底层DOM结构发生变化时触发</li><li><del>变动名称事件，当元素或者属性名变动时触发，已经废弃</del></li></ul><h5 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h5><ul><li>load事件</li><li>unload事件</li><li>resize事件<br><strong><em>浏览器窗口最小化最大化也会触发resize事件</em></strong></li><li>scroll事件</li></ul><h5 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h5><ul><li>blur</li><li>DOMFocusIn</li><li>DOMFocusOut</li><li>focus</li><li>focusin</li><li>focusout</li></ul><h5 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h5><p>DOM3级中定义了9个鼠标事件</p><ul><li>click</li><li>dbclick</li><li>mousedown</li><li>mouseenter: 在鼠标光标从元素外部首次移到元素范围之内时触发</li><li>mouseleave: 在位于元素上方的鼠标移动到元素范围之外时触发</li><li>mousemove: 当鼠标在元素内部移动时反复的触发</li><li>mouseout： 在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发</li><li>mouseover：在鼠标指针位于一个元素的外部，然后用户将其首次移入另外一个元素边界之内触发</li><li>mouseup</li></ul><ul><li><p>1.客户区坐标位置</p><blockquote><p>鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象的clientX和clientY属性中。</p></blockquote></li><li><p>2.页面坐标位置</p><blockquote><p>这个位置信息保存在事件对象的pageX和pageY属性中。</p></blockquote></li><li><p>3.屏幕坐标位置</p><blockquote><p>这个位置信息保存在事件对象的screenX和screenY属性中。</p></blockquote></li><li><p>4.修改键</p></li><li><p>5.相关元素</p></li><li>6.鼠标按钮</li><li><p>7.更多的事件信息</p><blockquote><p>对于鼠标事件来说，detail中包含一个数值，表示在给定的位置上发生多少次点击</p></blockquote></li><li><p>8.鼠标滚轮事件</p></li><li>9.触摸设备</li><li>10.无障碍性问题</li></ul><h5 id="键盘与文本事件"><a href="#键盘与文本事件" class="headerlink" title="键盘与文本事件"></a>键盘与文本事件</h5><p>有3个键盘事件</p><ul><li>keydown：在键盘上按下任何键触发，可重复触发</li><li>keypress: 在键盘上按下数字键触发，可重复触发</li><li>keyup: 当用户释放键盘上的键时处罚</li><li>textInput:在可编辑区域中输入字符时，就会触发这个事件</li></ul><h5 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h5><blockquote><p>用于处理IME的输入序列</p></blockquote><h5 id="变动事件"><a href="#变动事件" class="headerlink" title="变动事件"></a>变动事件</h5><p>能在DOM中某一部分发生变化时给出提示</p><ul><li>DOMSubtreeModified：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发</li><li>DOMNodeInserted: 在一个节点作为子节点被插入另一个节点中时触发</li><li>DOMNodeRemoved: 在节点从其父节点中被移除时触发</li><li>DOMNodeInsertedIntoDocument:在一个节点被直接插入文档或通过子树直接插入文档之后触发。这个事件在DOMNodeInserted之后触发</li><li>DOMNodeRemovedFromDocument:在一个节点被直接从文档中移除或通过子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发</li><li>DOMAtrrModified：在特性被修改之后触发</li><li>DOMChracterDataModified:在文本节点的值发生变化时触发。</li></ul><h5 id="HTML5事件"><a href="#HTML5事件" class="headerlink" title="HTML5事件"></a>HTML5事件</h5><ul><li>contextmenu事件<blockquote><p>用以表示何时应该显示上下文菜单，以便开发人员取消默认的上下文菜单而提供自定义的菜单</p></blockquote></li><li>beforeunload事件<blockquote><p>是为了让开发人员有可能在页面卸载之前阻止这一操作</p></blockquote></li><li>DOMContentLoaded事件<blockquote><p>window的load事件会在页面中的一切都加载完毕时触发，但这个过程可能会因为要加载外部资源过多而颇费周折。DOMContentLoaded事件则在形成完整的DOM树之后就会触发，不理会图像，JavaScript文件、css文件或其他资源是否下载完毕。</p></blockquote></li><li>readystatechange事件<blockquote><p>提供与文档或元素的加载状态有关的信息</p></blockquote></li><li>pageshow和pagehide事件</li><li>hashChange事件<blockquote><p>以便URL的参数列表发生变化时通知开发人员</p></blockquote></li></ul><h5 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h5><ul><li>orientationchange事件<blockquote><p>只要用户改变了设备查看模式，就会触发orientationchange事件   、</p></blockquote></li></ul><p><strong><em> 所有ios设备都支持orientationonchange事件和window.orientation属性</em></strong></p><ul><li>MozOrientation事件<blockquote><p>当设备的加速计检测到设备方向改变时，就会触发这个事件。该事件只能提供一个平面的方向变化。</p></blockquote></li></ul><p><strong><em> 只有带加速器的设备才支持MozOrientation事件</em></strong></p><ul><li>deviceorientation事件</li><li>devicemotion事件</li></ul><h5 id="触摸与手势事件"><a href="#触摸与手势事件" class="headerlink" title="触摸与手势事件"></a>触摸与手势事件</h5><ul><li>触摸事件</li><li>手势事件</li></ul><hr><h4 id="内存和性能"><a href="#内存和性能" class="headerlink" title="内存和性能"></a>内存和性能</h4><h5 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h5><blockquote><p>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理一个某一类型的所有事件</p></blockquote><p><strong><em>最适合采用事件委托的事件包括click,mouseup.mousedown,keyup,keydown和keypress</em></strong></p><h5 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h5><h4 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h4><h5 id="DOM中的事件模拟"><a href="#DOM中的事件模拟" class="headerlink" title="DOM中的事件模拟"></a>DOM中的事件模拟</h5><ul><li>模拟鼠标事件</li><li>模拟键盘事件</li><li>模拟其他事件</li><li>自定义DOM事件</li></ul><h5 id="IE中的事件模拟"><a href="#IE中的事件模拟" class="headerlink" title="IE中的事件模拟"></a>IE中的事件模拟</h5><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;javascript学习13章（事件）&quot;&gt;&lt;a href=&quot;#javascript学习13章（事件）&quot; class=&quot;headerlink&quot; title=&quot;javascript学习13章（事件）&quot;&gt;&lt;/a&gt;&lt;center&gt;javascript学习13章（事件）&lt;/
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网站搭建学习</title>
    <link href="http://yoursite.com/2018/08/24/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/24/网站搭建学习/</id>
    <published>2018-08-24T07:42:52.000Z</published>
    <updated>2018-08-24T09:15:55.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><pre><code>参考网址：https://yegod.github.io/blog-1/</code></pre><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><pre><code>参考网址：https://blog.csdn.net/ganzhilin520/article/details/79047983</code></pre><h3 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h3><pre><code>参考网址：https://blog.csdn.net/lcyaiym/article/details/76762074</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;网站搭建&quot;&gt;&lt;a href=&quot;#网站搭建&quot; class=&quot;headerlink&quot; title=&quot;网站搭建&quot;&gt;&lt;/a&gt;网站搭建&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;参考网址：https://yegod.github.io/blog-1/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 
      
    
    </summary>
    
    
      <category term="伸手党" scheme="http://yoursite.com/tags/%E4%BC%B8%E6%89%8B%E5%85%9A/"/>
    
  </entry>
  
</feed>
